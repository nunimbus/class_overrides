--- UserBackend.php	2021-12-24 16:10:08.547000000 -0600
+++ UserBackend.new.php	2021-12-24 16:22:11.328000000 -0600
@@ -32,14 +32,15 @@
 use OCP\UserInterface;
 use OCP\IUserBackend;
 use OCP\IConfig;
 use OCP\IURLGenerator;
 use OCP\ISession;
+use OCP\Authentication\IProvideUserSecretBackend;
 use Symfony\Component\EventDispatcher\GenericEvent;
 use function base64_decode;
 
-class UserBackend implements IApacheBackend, UserInterface, IUserBackend {
+class UserBackend implements IApacheBackend, UserInterface, IUserBackend, IProvideUserSecretBackend {
 	/** @var IConfig */
 	private $config;
 	/** @var IURLGenerator */
 	private $urlGenerator;
 	/** @var ISession */
@@ -141,15 +142,67 @@
 			foreach($values as $column => $value) {
 				$qb->setValue($column, $qb->createNamedParameter($value));
 			}
 			$qb->execute();
 
+			// If we use per-user encryption the keys must be initialized first
+			$userSecret = $this->getUserSecret($uid, $attributes);
+			if ($userSecret !== null) {
+				$this->updateUserSecretHash($uid, $userSecret);
+				// Emit a post login action to initialize the encryption module with the user secret provided by the idp.
+				\OC_Hook::emit('OC_User', 'post_login', ['run' => true, 'uid' => $uid, 'password' => $userSecret, 'isTokenLogin' => false]);
+			}
 			$this->initializeHomeDir($uid);
-
 		}
 	}
 
+	private function getUserSecretHash($uid) {
+		$qb = $this->db->getQueryBuilder();
+		$qb->select('token')
+ 		    ->from('user_saml_auth_token')
+ 		    ->where($qb->expr()->eq('uid', $qb->createNamedParameter($uid)))
+ 		    ->where($qb->expr()->eq('name', $qb->createNamedParameter('sso_secret_hash')))
+ 		    ->setMaxResults(10);
+		$result = $qb->execute();
+		$data = $result->fetchAll();
+		$result->closeCursor();
+		return $data;
+	}
+ 
+	private function checkUserSecretHash($uid, $userSecret) {
+		$data = $this->getUserSecretHash($uid);
+		foreach($data as $row) {
+			$storedHash = $row['token'];
+			if (\OC::$server->getHasher()->verify($userSecret, $storedHash, $newHash)) {
+				if (!empty($newHash)) {
+					$this->updateUserSecretHash($uid, $userSecret, true);
+				}
+				return true;
+			}
+ 		}
+		return false;
+	}
+
+	private function updateUserSecretHash($uid, $userSecret, $exists = false) {
+		$qb = $this->db->getQueryBuilder();
+		$hash = \OC::$server->getHasher()->hash($userSecret);
+		if ($exists || count($this->getUserSecretHash($uid)) > 0) {
+			$qb->update('user_saml_auth_token')
+			  ->set('token', $qb->createNamedParameter($hash))
+			  ->where($qb->expr()->eq('uid', $qb->createNamedParameter($uid)))
+ 			  ->where($qb->expr()->eq('name', $qb->createNamedParameter('sso_secret_hash')));
+		} else {
+			$qb->insert('user_saml_auth_token')
+			  ->values([
+			    'uid' => $qb->createNamedParameter($uid),
+			    'token' => $qb->createNamedParameter($hash),
+ 			    'name' => $qb->createNamedParameter('sso_secret_hash'),
+			  ]);
+		}
+		return $qb->execute();
+ 	}
+
 	/**
 	 * @param string $uid
 	 * @throws \OCP\Files\NotFoundException
 	 */
 	public function initializeHomeDir($uid) {
@@ -189,27 +242,19 @@
 	 * @param string $uid The username
 	 * @param string $password The password
 	 * @return string
 	 *
 	 * Check if the password is correct without logging in the user
-	 * returns the user id or false
+	 * returns the user id or false.
+	 *
+	 * By default user_saml tokens are passwordless and this function
+	 * is unused. It is only called if we have tokens with passwords,
+	 * which happens if we have SSO provided user secrets.
 	 */
 	public function checkPassword($uid, $password) {
-		/* @var $qb IQueryBuilder */
-		$qb = $this->db->getQueryBuilder();
-		$qb->select('token')
-			->from('user_saml_auth_token')
-			->where($qb->expr()->eq('uid', $qb->createNamedParameter($uid)))
-			->setMaxResults(1000);
-		$result = $qb->execute();
-		$data = $result->fetchAll();
-		$result->closeCursor();
-
-		foreach($data as $passwords) {
-			if(password_verify($password, $passwords['token'])) {
-				return $uid;
-			}
+	    if ($this->checkUserSecretHash($uid, $password)) {
+			return $uid;
 		}
 
 		return false;
 	}
 
@@ -598,10 +643,25 @@
 		}
 
 		return $value;
 	}
 
+	private function getUserSecret($uid, array $attributes) {
+		try {
+			$userSecret = $this->getAttributeValue('saml-attribute-mapping-user_secret_mapping', $attributes);
+			if ($userSecret === '') {
+				$this->logger->debug('Got no user_secret from idp', ['app' => 'user_saml']);
+			} else {
+				$this->logger->debug('Got user_secret from idp', ['app' => 'user_saml']);
+				return $userSecret;
+			}
+		} catch (\InvalidArgumentException $e) {
+			$this->logger->debug('No user_secret mapping configured', ['app' => 'user_saml']);
+		}
+		return null;
+	}
+
 	public function updateAttributes($uid,
 									 array $attributes) {
 		$user = $this->userManager->get($uid);
 		try {
 			$newEmail = $this->getAttributeValue('saml-attribute-mapping-email_mapping', $attributes);
@@ -675,15 +735,20 @@
 
 				foreach ($groupsToRemove as $group) {
 					$groupManager->get($group)->removeUser($user);
 				}
 			}
+
+			$userSecret = $this->getUserSecret($uid, $attributes);
+			if ($userSecret !== null) {
+				if (!$this->checkUserSecretHash($uid, $userSecret)) {
+					$this->updateUserSecretHash($uid, $userSecret);
+				}
+			}
 		}
 	}
 
-
-
 	public function countUsers() {
 		$query = $this->db->getQueryBuilder();
 		$query->select($query->func()->count('uid'))
 			->from('user_saml_users');
 		$result = $query->execute();
