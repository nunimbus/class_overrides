--- AppData.php	2021-11-15 19:53:50.000000000 +0000
+++ AppData.new.php	2022-03-23 17:47:41.340420907 +0000
@@ -52,10 +52,13 @@
 	private $folder;
 
 	/** @var (ISimpleFolder|NotFoundException)[]|CappedMemoryCache */
 	private $folders;
 
+	/** @var string */
+	private $appdataRoot = "";
+
 	/**
 	 * AppData constructor.
 	 *
 	 * @param IRootFolder $rootFolder
 	 * @param SystemConfig $systemConfig
@@ -66,10 +69,23 @@
 								string $appId) {
 		$this->rootFolder = $rootFolder;
 		$this->config = $systemConfig;
 		$this->appId = $appId;
 		$this->folders = new CappedMemoryCache();
+
+		if (in_array('appdataroot',\OC::$server->getSystemConfig()->getKeys())) {				
+			$arguments = [
+				'datadir' => \OC::$server->getSystemConfig()->getValue('appdataroot'),
+			];
+			
+			$storage = new \OC\Files\Storage\LocalRootStorage($arguments);
+			$loader = \OC::$server->query(IStorageFactory::class);
+			$mount = new \OC\Files\Mount\MountPoint($storage, '/appdata/', $arguments, $loader);
+
+			\OC::$server->getMountManager()->addMount($mount);
+			$this->appdataRoot = 'appdata/';
+		}
 	}
 
 	private function getAppDataFolderName() {
 		$instanceId = $this->config->getValue('instanceid', null);
 		if ($instanceId === null) {
@@ -78,15 +94,15 @@
 
 		return 'appdata_' . $instanceId;
 	}
 
 	private function getAppDataRootFolder(): Folder {
-		$name = $this->getAppDataFolderName();
+		$name = $this->appdataRoot . $this->getAppDataFolderName();
 
 		try {
 			/** @var Folder $node */
-			$node = $this->rootFolder->get($name);
+			$node = $this->rootFolder->get($name);				
 			return $node;
 		} catch (NotFoundException $e) {
 			try {
 				return $this->rootFolder->newFolder($name);
 			} catch (NotPermittedException $e) {
@@ -99,11 +115,11 @@
 	 * @return Folder
 	 * @throws \RuntimeException
 	 */
 	private function getAppDataFolder(): Folder {
 		if ($this->folder === null) {
-			$name = $this->getAppDataFolderName();
+			$name = $this->appdataRoot . $this->getAppDataFolderName();
 
 			try {
 				$this->folder = $this->rootFolder->get($name . '/' . $this->appId);
 			} catch (NotFoundException $e) {
 				$appDataRootFolder = $this->getAppDataRootFolder();
@@ -135,18 +151,26 @@
 		try {
 			// Hardening if somebody wants to retrieve '/'
 			if ($name === '/') {
 				$node = $this->getAppDataFolder();
 			} else {
-				$path = $this->getAppDataFolderName() . '/' . $this->appId . '/' . $name;
+				$path = $this->appdataRoot . $this->getAppDataFolderName() . '/' . $this->appId . '/' . $name;
 				$node = $this->rootFolder->get($path);
 			}
 		} catch (NotFoundException $e) {
 			$this->folders->set($key, $e);
 			throw $e;
 		}
 
+		try {
+			$this->getAppDataRootFolder()->newFolder($key);
+			$this->getAppDataRootFolder()->delete($key);
+			throw new NotFoundException;
+		} catch (NotPermittedException $e) {
+			// Do nothing
+		}
+
 		/** @var Folder $node */
 		$folder = new SimpleFolder($node);
 		$this->folders->set($key, $folder);
 		return $folder;
 	}
